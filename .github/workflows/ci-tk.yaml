# Copyright 2024 The IREE Authors
#
# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

name: "TK CI"

on:
  workflow_dispatch:
  pull_request:
      types: [opened, edited, synchronize, ready, ready_for_review, converted_to_draft]
  push:
    branches:
      - main

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit). The workflow name is prepended to avoid conflicts between
  # different workflows.
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

env:
  LLVM_SHA_FILE: llvm-sha.txt
  LLVM_CACHE_NUMBER: 1  # Increase to reset cache

jobs:
  build_llvm_linux:
    name: Builds Linux LLVM/MLIR
    runs-on: linux-mi300-1gpu-ossci-iree-org # temp
    defaults:
      run:
        shell: bash -el {0}
    timeout-minutes: 420
    steps:
      - name: Checkout Water
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ftynse/water
          ref: main
          path: ${GITHUB_WORKSPACE}/water
          fetch-depth: 0

      - name: Setup Cache Vars
        run: |
          echo 'LLVM_SHA<<EOF' >> $GITHUB_ENV
          cat ${GITHUB_WORKSPACE}/water/$LLVM_SHA_FILE >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Setup env
        run: |
          sudo apt update
          sudo apt install -y ninja-build cmake clang lld
          pip install lit

      - name: Cache LLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        with:
          path: |
            $GITHUB_WORKSPACE/llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}

      - name: Checkout LLVM
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_SHA }}
          path: ${GITHUB_WORKSPACE}/llvm-mlir/llvm
          fetch-depth: 0

      - name: Build LLVM-MLIR
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        timeout-minutes: 420
        run: |
          pushd ${GITHUB_WORKSPACE}/llvm-mlir
          echo "INFO: Need to rebuild LLVM-MLIR. Previous installation for MLIR not found"
          np=`nproc`
          echo "INFO: nproc $np"
          mkdir _build
          cd _build
          export CC=clang
          export CXX=clang++
          cmake ../llvm                                                        \
            -GNinja                                                            \
            -DCMAKE_BUILD_TYPE=Release                                         \
            -DLLVM_ENABLE_PROJECTS="mlir"                                      \
            -DLLVM_ENABLE_ASSERTIONS=ON                                        \
            -DLLVM_INSTALL_UTILS=ON                                            \
            -DLLVM_TARGETS_TO_BUILD="X86;AMDGPU"                               \
            -DLLVM_ENABLE_BINDINGS=OFF                                         \
            -DLLVM_ENABLE_ZSTD=OFF                                             \
            -DMLIR_INCLUDE_TESTS=OFF                                           \
            -DLLVM_USE_LINKER=lld                                              \
            -DLLVM_DISTRIBUTION_COMPONENTS="llvm-headers;llvm-libraries;cmake-exports;FileCheck;count;not;mlir-headers;mlir-libraries;mlir-cmake-exports;mlir-tblgen" \
            -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install
          ninja install-distribution-stripped
          cp bin/FileCheck ${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install/bin/
          cp bin/count ${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install/bin/
          cp bin/not ${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install/bin/
          popd


  test:
    name: "Unit Tests and Type Checking"
    strategy:
      fail-fast: false
      matrix:
        version: [3.11]
        os: [ubuntu-22.04, linux-mi300-1gpu-ossci-iree-org, nodai-amdgpu-mi250-x86-64]
    runs-on: ${{matrix.os}}
    needs: build_llvm_linux
    if: github.event.pull_request.draft == false
    env:
      VENV_DIR: ${{ github.workspace }}/.turbine-venv
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Checkout Water
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ftynse/water
          ref: main
          path: ${GITHUB_WORKSPACE}/water
          fetch-depth: 0

      - name: Setup Cache Vars
        run: |
          echo 'LLVM_SHA<<EOF' >> $GITHUB_ENV
          cat ${GITHUB_WORKSPACE}/water/$LLVM_SHA_FILE >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Setup env
        run: |
          sudo apt update
          sudo apt install -y ninja-build cmake clang lld
          pip install lit

      - name: Cache LLLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v3
        with:
          path: |
            $GITHUB_WORKSPACE/llvm-mlir/_mlir_install/**
          key: ${{ runner.os }}-build-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}


      - name: Build water
        run: |
          export EXTERNAL_LIT=${GITHUB_WORKSPACE}/water/scripts/runlit.py
          export LLVM_DIR=${GITHUB_WORKSPACE}/llvm-mlir/_mlir_install
          mkdir -p cmake_build
          cd cmake_build
          export CC=clang
          export CXX=clang++
          cmake ${GITHUB_WORKSPACE}                                            \
            -GNinja                                                            \
            -DCMAKE_BUILD_TYPE=Release                                         \
            -DLLVM_DIR=${LLVM_DIR}/lib/cmake/llvm                              \
            -DMLIR_DIR=${LLVM_DIR}/lib/cmake/mlir                              \
            -DLLVM_EXTERNAL_LIT=${EXTERNAL_LIT}
          cmake --build .

      - name: Test water
        run: |
          cd cmake_build
          cmake --build . --target check-water

      - name: "Setting up Python"
        id: setup_python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{matrix.version}}

      - name: Create Python venv
        run: |
          python -m venv ${VENV_DIR}
          source ${VENV_DIR}/bin/activate
          echo VIRTUAL_ENV=$VIRTUAL_ENV >> "$GITHUB_ENV"
          echo "$VENV_DIR/bin" >> "$GITHUB_PATH"

      - name: "Setting up Rust"
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install pip deps
        if: "(!contains(toJSON(matrix.os), 'amdgpu') && !contains(toJSON(matrix.os), 'mi300')) && !cancelled()"
        run: |
          python -m pip install --no-compile --upgrade pip
          # Note: We install in three steps in order to satisfy requirements
          # from non default locations first. Installing the PyTorch CPU
          # wheels saves multiple minutes and a lot of bandwidth on runner setup.
          pip install --no-compile -r pytorch-cpu-requirements.txt
          pip install --no-cache-dir -r requirements-iree-pinned.txt --upgrade
          pip install -r requirements.txt -e .

      - name: Install GPU rocm and pip deps (mi300)
        if: "(!contains(toJSON(matrix.os), 'amdgpu') && contains(toJSON(matrix.os), 'mi300')) && !cancelled()"
        run: |
          sudo apt update
          sudo apt install -y rocm
          python -m pip install --no-compile --upgrade pip
          # Note: We install in three steps in order to satisfy requirements
          # from non default locations first. Installing the PyTorch CPU
          # wheels saves multiple minutes and a lot of bandwidth on runner setup.
          pip install --no-compile -r pytorch-rocm-requirements.txt
          pip install --no-cache-dir -r requirements-iree-pinned.txt --upgrade
          pip install -r requirements.txt -e .
          pip install -r requirements-wave-runtime.txt -e .

      - name: Install pip deps (mi250)
        if: "(contains(toJSON(matrix.os), 'amdgpu') && !contains(toJSON(matrix.os), 'mi300')) && !cancelled()"
        run: |
          python -m pip install --no-compile --upgrade pip
          # Note: We install in three steps in order to satisfy requirements
          # from non default locations first. Installing the PyTorch CPU
          # wheels saves multiple minutes and a lot of bandwidth on runner setup.
          pip install --no-compile -r pytorch-rocm-requirements.txt
          pip install --no-cache-dir -r requirements-iree-pinned.txt --upgrade
          pip install -r requirements.txt -e .

      - name: Run unit tests
        if: ${{ !cancelled() }}
        run: |
          pytest -n 4 --capture=tee-sys -vv ./tests/kernel/wave/

      - name: Test TKW runtime related stack on amdgpu
        if: "(contains(toJSON(matrix.os), 'amdgpu') || contains(toJSON(matrix.os), 'mi300')) && !cancelled()"
        run: |
          export WAVE_CACHE_DIR=$PWD/.wave
          rm -rf ./.wave
          nproc
          WAVE_CACHE_ON=1 pytest --capture=tee-sys -vv --run-e2e --durations=100 ./tests/kernel/wave/runtime

      - name: Run e2e tests on AMD GPU
        if: "(contains(toJSON(matrix.os), 'amdgpu') || contains(toJSON(matrix.os), 'mi300')) && (github.event_name == 'pull_request') && !cancelled()"
        run: |
          WAVE_CACHE_ON=0 pytest -n 4 --capture=tee-sys -vv --run-e2e --durations=100 ./tests/kernel/wave/

      - name: Run expensive e2e tests on AMD GPU
        if: "(contains(toJSON(matrix.os), 'amdgpu') || contains(toJSON(matrix.os), 'mi300')) && (github.event_name != 'pull_request') && !cancelled()"
        run: |
          WAVE_CACHE_ON=0 pytest -n 4 --capture=tee-sys -vv --run-e2e --run-expensive-tests --durations=100 ./tests/kernel/wave/

      - name: Run LIT tests
        if: ${{ !cancelled() }}
        run: |
          lit lit_tests/ -v

      - name: MyPy Type Checking
        if: ${{ !cancelled() }}
        run: |
          mypy
